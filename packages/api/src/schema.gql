type Query {
  getCoffees: [Coffee]
}

type Mutation {
  orderCoffee(coffeeId: ID!, sizeId: ID!, milkId: ID!): OrderDetails!
  cancelOrder(orderId: ID!): OrderDetails!
}

type Subscription {
  orderStatus: OrderDetails
}

type Coffee {
  id: ID!
  name: String!
  description: String!
  price: Int! # in cents
}

type OrderDetails {
  id: ID!
  coffee: Coffee!
  status: String!
  note: String
  milk: MilkVariant!
  size: SizeVariant!
  finalPrice: Int!
}

interface Variant {
  id: ID!
  name: String!
  priceDifference: Int!
}

type MilkVariant implements Variant {
  name: MilkType!
}

type SizeVariant implements Variant {
  name: SizeType!
}

enum MilkType {
  SOY
  ALMOND
  WHOLE
  SKIM
}

enum SizeType {
  SMALL
  MEDIUM
  LARGE
}
